summarise(total=n_distinct(dest))
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
summarise(total=n_distinct(dest))
# 101 airports in the dataset "airports" are also in the dataset "flights."
flights1 <- flights%>%
select(-is.na(dep_delay))
flights1 <- flights%>%
select(-is.na(flights$dep_delay))
flights1 <- flights%>%
select(-is.na(flights$dep_delay))%>%
select(-is.na(flights$arr_delay))
flights1
flights1 %>%
group_by(tailnum)%>%
arrange(arr_delay)
flights1 %>%
group_by(dest)%>%
summarise(total=n_distinct(carrier))%>%
arrange(desc(total))
order_by(avg_arr)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
summarise(avg_arr=mean(arr_delay, na.rm=TRUE)) %>%
order_by(avg_arr)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
summarise(avg_arr=mean(arr_delay, na.rm=TRUE)) %>%
arrange(avg_arr)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
summarise(avg_arr=mean(arr_delay, na.rm=TRUE))
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(avg_dly)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
which.max(avg_dly)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
which.max(flights,avg_dly)
flights1 <- flights%>%
filter(!is.na(dep_delay))%>%
filter(!is.na(arr_delay))
flights1
flights1 %>%
group_by(tailnum)%>%
arrange(arr_delay)
flights1 %>%
group_by(tailnum,arr_delay)%>%
arrange(arr_delay)
flights1 %>%
group_by(tailnum)%>%
arrange(arr_delay)
library(dplyr)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
which.max(avg_dly)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
which.is.max(avg_dly)
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(dest)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airports, by=c("dest"="faa")) %>%
group_by(name)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(name)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
# load data
gamble <- (data=teengamb)
# load data
install.packages("teengamb")
gamble <- (data=teengamb)
install.packages("teengamb")
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
# ?????
flights %>%
semi_join(airlines, by=c("name"="carrier")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airlines, by=c("flights"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))%>%
arrange(desc(avg_dly))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(name)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))
flights %>%
semi_join(airlines, by=c("carrier"="name")) %>%
group_by(carrier)%>%
summarise(avg_dly=mean(arr_delay, na.rm=TRUE))
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
library(dplyr)
install.packages("nycflights13")
install.packages("nycflights13")
library(nycflights13)
library(tidyverse)
library(dplyr)
library("faraway")
data("star")
help(star)
# For an illustrative purpose, we drop two observations
star <- star[-c(11,20),]
# Change index and row numbers
star$index <- row.names(star) <- 1:nrow(star)
star$index
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n")
text(star$temp, star$light, labels=star$index)
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
plot(residuals(model1) ~ fitted(model1), data=star)
abline(h=0)
plot(abs(residuals(model1)) ~ fitted(model1), data=star)
abline(h=0)
install.packages("car")
library("car") # a package with lots of diagnostic tools
# Normality of Residuals
qqPlot(model1)
# Outliers
outlierTest(model1)
install.packages("teengamb")
# load data
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
plot(residuals(model1) ~ fitted(model1), data=gamble)
abline(h=0)
gamble <- (data=teengamb)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#Check constant variance
res <- model1$residuals
fitted <- model1$fitted.values
plot(res~fitted)
#Check constant variance
plot(residuals(model1) ~ fitted(model1), data=gamble)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#Check constant variance
plot(residuals(model1) ~ fitted(model1), data=gamble)
plot(res ~ fitted, data = gamble)
#Check the normality
qqplot(model1)
install.packages("car")
install.packages("car")
library("car")
# For an illustrative purpose, we drop two observations
star <- star[-c(11,20),]
# Change index and row numbers
star$index <- row.names(star) <- 1:nrow(star)
star$index
# The data look like this
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n")
text(star$temp, star$light, labels=star$index)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Estimated line
abline(model1, col="firebrick1", lwd=2)
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
abline(h=0)
# Use absolute residuals
plot(abs(residuals(model1)) ~ fitted(model1), data=star)
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
# Use absolute residuals
plot(abs(residuals(model1)) ~ fitted(model1), data=star)
abline(h=0)
# Normality of Residuals
qqPlot(model1)
# Outliers
outlierTest(model1)
# Cook's distance and influential observations
cooks.dist <- cooks.distance(model1)
plot(cooks.dist)
text(c(28,32), cooks.dist[c(28,32)], labels=c(28,32))
# Influential observations
influencePlot(model1,
sub="Circle size is proportial to Cook's Distance")
plot(cooks.dist)
# Influential observations
influencePlot(model1,
sub="Circle size is proportial to Cook's Distance")
# What if we drop 28 and 32?
model2 <- lm(light ~ temp, data=star[-c(28,32),])
summary(model2)
# Let's compare Models 1 and 2
plot(star$temp, star$light,
xlab="Temperature", ylab="Light Intensity",
type="n") # type="n" does not plot anything
text(star$temp, star$light, labels=star$index)
# Model 1
abline(model1, col="firebrick1", lwd=2)
# Model 2 (without 28 and 32)
abline(model2, col="maroon1", lwd=2)
View(star)
# What if we include a dummy variable for 28 and 32?
star$outliers <- 0
star$outliers[c(28,32)] <- 1
model3 <- lm(light ~ temp + outliers, data=star)
summary(model3)
# Get the coefficients
coef(model3)
# What are these?
abline(a=coef(model3)[1], b=coef(model3)[2],
lwd=2, col="mediumorchid1")
abline(a=coef(model3) + coef(model3)[3], b=coef(model3)[2],
lwd=2, col="indianred1")
# Check the residuals from Model 3. Do they look more or less random?
plot(residuals(model3) ~ fitted(model3), data=star)
#Check for high leverage points
hatvalues(model1)
plot(hatvalues(model1))
?gamble
summary(gamble)
length(gamble)
str(gamble)
str(gamble)
plot(hatvalues(model1))
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
plot(hatvalues(model1),pch=16, cex=2)
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
identify(1:47,hatvalues(model1), row.names(gamble))
identify (1:47, hatvalues(model1),row.names(gamble))
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
plot(hatvalues(model1))
identify (1:47, hatvalues(model1),row.names(gamble))
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify (1:47, hatvalues(model1),row.names(gamble))
#Check for high leverage points
hatvalues(model1)
identify (1:47, hatvalues(model1),row.names(gamble))
plot(hatvalues(model1), pch=16, cex=2)
plot(hatvalues(model1), pch=16, cex=2)
library("car")
#Check for outliers.
outlierTest(model1)
#Check for outliers.
outlierTest(model1)
summary(outlierTest(model1))
cooks.dist <- cooks.distance(model1)
plot(cooks.dist)
#Check for outliers.
outlierTest(model1)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
model1 <- lm(light ~ temp, data=star)
summary(model1)
# Check the residuals. Do they look more or less random?
plot(residuals(model1) ~ fitted(model1), data=star)
# Normality of Residuals
qqPlot(model1)
#Check for outliers.
outlierTest(model1)
#Check for high leverage points
hatvalues(model1)
str(gamble) # n=47
# Outliers
outlierTest(model1)
identify (1:47, hatvalues(model1),row.names(gamble))
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
#Check for high leverage points
hatvalues(model1)
plot(hatvalues(model1), pch=16, cex=2)
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify (1:47, hatvalues(model1),row.names(gamble))
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/answer_key")
df("a.pdf")
res <- model1$residuals
fitted <- model1$fitted.values
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("a.pdf")
res <- model1$residuals
fitted <- model1$fitted.values
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("b.pdf")
qqplot(model1)
dev.off()
pdf("c.pdf")
hatvalues(model1)
str(model1) #n=47
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
dev.off()
influencePlot(model1, sub="Circlee size is proportial to Cook's Distance")
pdf("e.pdf")
influencePlot(model1, sub="Circlee size is proportial to Cook's Distance")
dev.off()
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
res <- abs(model1$residuals)
fitted <- abs(model1$fitted.values)
plot(res ~ fitted, data = gamble)
abline(h=0)
pdf("a.pdf")
res <- abs(model1$residuals)
fitted <- abs(model1$fitted.values)
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("a.pdf")
res <- abs(model1$residuals)
fitted <- abs(model1$fitted.values)
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("b.pdf")
qqplot(model1)
dev.off()
qqPlot(model1)
pdf("b.pdf")
qqPlot(model1)
dev.off()
pdf("c.pdf")
hatvalues(model1)
str(model1) #n=47
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
dev.off()
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
dev.off()
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5")
gamble <- (data=teengamb)
install.packages("teengamb")
gamble <- (data=teengamb)
install.packages("car")
library("car")
install.packages("car")
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
pdf("a.pdf")
res <- abs(model1$residuals)
fitted <- abs(model1$fitted.values)
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("b.pdf")
qqPlot(model1)
dev.off()
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("car")
qqPlot(model1)
pdf("b.pdf")
qqPlot(model1)
dev.off()
hatvalues(model1)
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
pdf("b.pdf")
qqPlot(model1)
dev.off()
qqPlot(model1)
hatvalues(model1)
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
#Check for outliers.
outlierTest(model1)
# Bivariate model
model1 <- lm(light ~ temp, data=star)
# Normality of Residuals
qqPlot(model1)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
qqPlot(model1)
influencePlot(model1, sub="Circlee size is proportial to Cook's Distance")
pdf("e.pdf")
influencePlot(model1, sub="Circlee size is proportial to Cook's Distance")
dev.off()
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS5/template")
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
pdf("a.pdf")
res <- abs(model1$residuals)
fitted <- abs(model1$fitted.values)
plot(res ~ fitted, data = gamble)
abline(h=0)
dev.off()
pdf("b.pdf")
qqPlot(model1)
dev.off()
pdf("e.pdf")
influencePlot(model1, sub="Circlee size is proportial to Cook's Distance")
dev.off()
qqPlot(model1)
hatvalues(model1)
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
identify(1:47, hatvalues(model1), row.names(gamble))
pdf("c.pdf")
hatvalues(model1)
str(model1) #n=47
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
dev.off()
pdf("c.pdf")
hatvalues(model1)
str(model1) #n=47
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
dev.off()
hatvalues(model1)
abline(h=2*3/47, lty=2)
# run regression on gamble with specified predictors
model1 <- lm(gamble ~ sex + status + income + verbal, gamble)
hatvalues(model1)
abline(h=2*3/47, lty=2)
plot(hatvalues(model1))
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
pdf("c.pdf")
hatvalues(model1)
plot(hatvalues(model1))
str(model1) #n=47
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
dev.off()
pdf("c.pdf")
hatvalues(model1)
str(model1) #n=47
plot(hatvalues(model1))
abline(h=2*3/47, lty=2)
abline(h=3*3/47, lty=3)
dev.off()
