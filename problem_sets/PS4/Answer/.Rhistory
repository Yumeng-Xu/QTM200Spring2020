selection_vector <- poker_vector > 0
# Select from poker_vector these days
poker_winning_days <- poker_vector[selection_vector]
poker_winning_days
poker_winning_days <- poker_vector>0
poker_winning_days
# Construct a matrix with 3 rows that contain the numbers 1 up to 9
matrix (1:9, byrow=TRUE, nrow=3) #by column then byrow = FALSE
new_hope <- c(460.998, 314.4)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.8)
# Create box_office
box_office <- c(new_hope, empire_strikes, return_jedi)
# Construct star_wars_matrix
star_wars_matrix <- matrix(box_office, byrow=TRUE, nrow=3)
star_wars_matrix
#FACTORS
sex_vector <- c("Male", "Female", "Female", "Male", "Male")
sex_vector
#First create a vector that contains all the observations that belong to a number of categories
#convert the vector to a factor
factor_sex_vector <-factor(sex_vector)
factor_sex_vector
#display cars dataset
cars
#learn about cars dataset
?cars
cars_dist_sorted <- cars[order(cars$dist),]
cars_dist_sorted
cars_dist_sorted <- rowSums(dist_order)
cars_dist_sorted
cars_dist_sorted <- cars[order(cars$dist),]
cars_dist_sorted_new <- rowSums(dist_order)
cars_dist_sorted
cbind(cars_dist_sorted, dist_orde)
cbind(cars_dist_sorted, dist_order)
dist_order <- c(1:50)
cbind(cars_dist_sorted, dist_order)
cars[,speed<20]
subset[cars, dist<20]
subset(cars, speed<20)
getwd
getwd()
install.packages("cars")
library(cars)
library(CARS)
install.packages("CARS")
library("CARS", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Duncan
knitr::opts_chunk$set(echo = TRUE)
detach("package:CARS", unload=TRUE)
library("CARS", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Duncan
install.packages("car")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:CARS", unload=TRUE)
detach("package:car", unload=TRUE)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:car", unload=TRUE)
detach("package:carData", unload=TRUE)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("car")
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Duncan
￥Duncan
?Duncan
Duncan
library(readxl)
NLP_QC_NLP_SCNLP_input_mergedCoNLL_police_FORM <- read_excel("Desktop/QSS446/NLP/output/NLP_QC_NLP_SCNLP_input_mergedCoNLL_police_FORM.csv")
View(NLP_QC_NLP_SCNLP_input_mergedCoNLL_police_FORM)
setwd("/Users/yumengxu/Desktop/QTM150")
polic_form <-read.csv("NLP_QC_NLP_SCNLP_input_mergedCoNLL_police_FORM的副本.csv")
hist(polic_form$SEARCHED.TOKEN.POSTAG)
barplot(polic_form$SEARCHED.TOKEN.POSTAG)
barplot(polic_form$SEARCHED.TOKEN.POSTAG)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Duncan
#Check Dataset
?Duncan
#Q1 a) How many observations in Duncan?
dim(Duncan)
#Q1 b) Visualize the relationship of income.
#Since type of occupation is a categorical variable and income is a quant variable
#I use a side-by-side boxplot.
boxplot(Duncan$type,Duncan$income)
#Q1 b) Visualize the relationship of income.
#Since type of occupation is a categorical variable and income is a quant variable
#I use a side-by-side boxplot.
boxplot(Duncan$income,Duncan$type)
#Q1 b) Visualize the relationship of income.
#Income is a quantative variable, so I use a histogram.
hist(Duncan$income)
source('~/.active-rstudio-document')
#Check Dataset
?Duncan
#Q1 c) Visualize the relationship between income and prestige
#I use a scatterplot to visulize these two quantative variables.
plot(Duncan$prestige,Duncan$income)
fruitfly <- read.csv("fruitfly.csv")
#Q2 a) How many observations in each type of fruitflies?
#Import data
setwd("/Users/yumengxu/Desktop/QTM150")
fruitfly <- read.csv("fruitfly.csv")
summary(fruitfly)
#a) How many observations in each type of fruitflies?
dim(fruitfly)
#There are 125 observations in the data.
fruitfly
#a) How many observations in each type of fruitflies?
dim(fruitfly$type)
#b) Average lifespan in the type 3 group
subset(fruitfly,subset = type=3)
fruitfly$type[3]
#b) Average lifespan in the type 3 group
#create a new datdaset that only contains type 3 group
subset3<-subset(fruitfly,type=3)
#Calculate its mean.
mean(subset3$lifespan)
#b) Average lifespan in the type 3 group
#create a new datdaset that only contains type 3 group
subset3<-subset(fruitfly,type=3)
#Calculate its mean.
mean(subset3$lifespan)
source('~/.active-rstudio-document')
knitr::opts_chunk$set(echo = TRUE)
#Question 1
#Check Dataset
?Duncan
Duncan
#a) How many observations in Duncan?
dim(Duncan)
#There are 45 observations in the data.
#b) Visualize the relationship of income.
#Income is a quantative variable, so I use a histogram.
hist(Duncan$income)
#The graph is not symmetric, since it has several peaks.
#The center of the distribution is located between 40-50.
#The observations cover a wide range, so the spread is large.
#c) Visualize the relationship between income and prestige
#I use a scatterplot to visulize these two quantative variables.
plot(Duncan$prestige,Duncan$income)
#The graph shows that income is directly proportional to the prestige of occupation.
#The more prestige one's occupation is, the more income he/she will earn.
#Question 2
#Import data
setwd("/Users/yumengxu/Desktop/QTM150")
fruitfly <- read.csv("fruitfly.csv")
#a) How many observations in each type of fruitflies?
dim(fruitfly)
#There are 5 observations in each type of fruitflies.
#b) Average lifespan in the type 3 group
#create a new datdaset that only contains type 3 group
subset3<-subset(fruitfly,type=3)
#Calculate its mean.
mean(subset3$lifespan)
#The average lifespan is 57.44.
library(car)
orange
Orange
?Orange
str(Orange)
mean(subset(fruitfly,type==3)$lifespan)
#Question 2
#Import data
setwd("/Users/yumengxu/Desktop/QTM150")
fruitfly <- read.csv("fruitfly.csv")
mean(subset(fruitfly,type==3)$lifespan)
#b) Average lifespan in the type 3 group
#create a new datdaset that only contains type 3 group
subset3<-subset(fruitfly,type=3)
#Calculate its mean.
mean(subset3$lifespan)
#b) Average lifespan in the type 3 group
#create a new datdaset that only contains type 3 group
subset3<-subset(fruitfly,type==3)
#Calculate its mean.
mean(subset3$lifespan)
#a) How many observations in each type of fruitflies?
str(fruitfly)
#a) How many observations in each type of fruitflies?
dim(fruitfly$type)
#a) How many observations in each type of fruitflies?
fruitfly$type
#a) How many observations in each type of fruitflies?
hist(fruitfly$type)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
gss%>%
group_by(year)%>%  ##2014 is the latest year
summarise(largest=partyid[which.max(percent)],
least=partyid[which.min(percent)])##find the least and largest religion for each year
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
setwd("/Users/yumengxu/Desktop/QTM150")
gss <-read.csv("gssexam.csv")
gss%>%
group_by(year)%>%  ##2014 is the latest year
summarise(largest=partyid[which.max(percent)],
least=partyid[which.min(percent)])##find the least and largest religion for each year
names(gss) #the column name showing marital status is called "marital"
levels(gss$marital) #marrided respondents would answer "Married"
percent=sum(gss$marital=="Married", na.rm = T)/length(gss$marital)*100 #calculate the percent and save the answer to "percent"
percent #show the result
#Percent of married respondents is 47.09%
gss%>%
group_by(year)%>%  ##2014 is the latest year
summarise(largest=partyid[which.max(percent)],
least=partyid[which.min(percent)])##find the least and largest religion for each year
gss%>%
filter(year==2014)%>%
group_by(partyid)%>%
summarise(percent)
gss%>%
filter(year==2014)%>%
group_by(partyid)%>%
summarise(sum(gss$marital=="Married", na.rm = T)/length(gss$marital)*100)
gss%>%
filter(year==2014)%>%
group_by(partyid)%>%
summarise(percent=sum(marital=="Married")/sum(!is.na(marital))*100)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
p<-ggplot(mtcars, aes(x=wt, y=mpg))+
geom_point(aes(col=factor(cyl)))+
geom_smooth(aes(col=factor(cyl)), method="lm", se=F)+
annotate(geom="text", x=2,y=25, label="y=ax+b")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
p<-ggplot(mtcars, aes(x=wt, y=mpg))+
geom_point(aes(col=factor(cyl)))+
geom_smooth(aes(col=factor(cyl)), method="lm", se=F)+
annotate(geom="text", x=2,y=25, label="y=ax+b")
ggplotly(p)
p<-ggplot(mtcars, aes(x=wt, y=mpg))+
geom_point(aes(col=factor(cyl)))+
geom_smooth(aes(col=factor(cyl)), method="lm", se=F)+
annotate(geom="text", x=2,y=25, label="y=ax+b")
ggplotly(p)
p<-ggplot(mtcars, aes(x=wt, y=mpg))+
geom_point(aes(col=factor(cyl)))+
geom_smooth(aes(col=factor(cyl)), method="lm", se=F)+
annotate(geom="text", x=2,y=25, label="y=ax+b")
p
ggplotly(p)
knitr::opts_chunk$set(echo = TRUE)
library(ggplotly)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
library(gapminder)
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
plot_ly(p)
p<-ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids=country)) +
scale_x_log10()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
install.packages("plotly")
library(plotly)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
install.packages("plotly")
library(ggplot2)
library(plotly)
library(tidyverse)
ggplotly(p)
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
install.packages("plotly")
library(ggplot2)
library(plotly)
library(tidyverse)
ggplotly(p)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(tidyverse)
library(gapminder)
install.packages("gapminder")
library(gapminder)
p<-ggplot(gapminder, aes(x=gdpPercap, y=lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids=country)) +
scale_x_log10()
ggplotly(p)
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
geom_point(aes(size = pop, frame = year, ids = country)) +
scale_x_log10()
ggplotly(p) %>%
animation_opts(transition = 500, easing = "linear", mode = "immediate")
# transition: the duration of the smooth transition between frame (in milliseconds)
# easing: the type of transition easing
# mode: describes how a new animate call interacts with currently-running animations.
p2 <- ggplotly(p) %>%
animation_opts(
1000, easing = "elastic", redraw = FALSE
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)
p2 <- ggplotly(p) %>%
animation_opts(
1000, easing = "elastic", redraw = FALSE
) %>%
animation_button(
x = 1, xanchor = "right", y = 0, yanchor = "bottom"
) %>%
animation_slider(
currentvalue = list(prefix = "YEAR ", font = list(color="red"))
)
p2
ggplotly(p2)
tips<-read.csv("tips.csv")
setwd("/Users/yumengxu/Desktop/QTM151")
tips<-read.csv("tips.csv")
head(tips)
str(tips) #how mny obs and vars
summary(tips) #min/max of each obs
tips<-read.csv("tips.csv")
tips<-read.csv("tips.csv")
setwd("/Users/yumengxu/Desktop/QTM151")
tips<-read.csv("tips.csv")
setwd("/Users/yumengxu/Desktop/QTM151")
tips<-read.csv("tips.csv")
head(tips)
str(tips) #how mny obs and vars
summary(tips) #min/max of each obs
setwd("/Users/yumengxu/Desktop/QTM151")
tips<-read.csv("tips.csv")
# template
# plot_ly(data, x, y, symbol, size,  type, mode, color)
p<-plot_ly(tips, x=~tip, type="histogram")
p1<-plot_ly(tips, x=~tip) %>% add_histogram(name="tip")
p2<-plot_ly(tips, x=~totbill) %>% add_histogram(name="totalbill")
subplot(p1,p2) %>% hide_legend()
p<-plot_ly(tips, x=~tip, type="histogram")
p
p1<-plot_ly(tips, x=~tip) %>% add_histogram(name="tip")
p1
p2<-plot_ly(tips, x=~totbill) %>% add_histogram(name="totalbill")
p2
subplot(p1,p2) %>% hide_legend()
plot_ly(tips, x = ~sex, y=~tip, type = "box")
plot_ly(tips, x = ~sex, y=~tip) %>% add_boxplot()
plot_ly(tips, x=~sex, y=~tip, type="box", boxpoints="all", pointpos=2, marker=list(color="green"))  %>%
layout(title = "Boxplot of tip by sex")
plot_ly(tips, x=~sex, y=~tip, type="box", boxpoints="all", pointpos=1, marker=list(color="green"))  %>%
layout(title = "Boxplot of tip by sex")
plot_ly(tips, x=~totbill, y=~tip, type="scatter", mode="markers")
plot_ly(tips, x=~totbill, y=~tip) %>% add_markers(symbol= ~sex)
plot_ly(tips, x=~totbill, y=~tip, color=~day, type="scatter", mode="markers")
plot_ly(tips, x=~totbill, y=~tip, color=~day, type="scatter", mode="text+markers", text=~day)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
qplot(diamonds,geom = "histogram", binwidth=0.1, data=carat))
qplot(diamonds,geom = "histogram", binwidth=0.1, data=carat)
?diamonds
qplot(diamonds,geom = "histogram", binwidth=0.1, data=diamonds$carat)
qplot(diamonds,geom = "histogram", binwidth=0.1, data=carat)
dsmall <- subset(diamonds)
dsmall <- sample(diamonds)
dsmall <- sample(diamonds)
dsmall <- sample(diamonds,500,replace = FALSE)
dsmall <- sample(diamonds,100,replace = FALSE)
qplot(diamonds,geom = "histogram", binwidth=0.1, data=carat)
qplot(diamonds,geom = "histogram", binwidth=0.1, data = carat)
qplot(diamonds,geom = "histogram", data=carat, binwidth=0.1)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
qplot(diamonds,geom = "histogram", binwidth=0.1, data = carat)
library(diamonds)
library(ggplot2)
qplot(diamonds,geom = "histogram", data=carat, binwidth=0.1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
qplot(diamonds,geom = "histogram", data=carat, binwidth=0.1)
ggplot(tips, aes(x=totbill, y=tip))+
geom_point()+
geom_smooth(method="lm")
qplot(carat,geom = "histogram", data=diamonds, binwidth=0.1)
plot(tips$totbill, tips$tip, col="blue", pch=4, cex=2, xlab="Total bill", ylab="Tip", main="Scatterplot")
qplot(carat, color, data=diamonds, color=color)
qplot(color, carat, data=diamonds, color=color)
qplot(color, carat, data=diamonds, color=color)
qplot(carat, data=diamonds, color=color)
# set color according to the variable sex
qplot(tip, geom = "histogram", binwidth=0.3, fill=sex, data=tips)
qplot(carat, data=diamonds, fill=color)
qplot(carat, geom="density", data=diamonds, fill=color)
qplot(carat, price, geom = c("point","smooth"), alpha=0.1, method="lm", data=diamonds)
# separate regression line for different sex
qplot(totbill, tip, geom = c("point","smooth"), method="lm", formula=y~x, color=sex, data=tips)
qplot(totbill, tip, geom = c("point","smooth"), method="lm", data=tips)
qplot(carat, price, geom = c("point","smooth"), method="lm", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), shape=cut, alpha=0.1, method="lm", data=diamonds)
#As the carat of the diamonds increases, the price of the diamonds increases.
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
ggplot(diamonds1, aes(x=carat, y=price))+
geom_point(aes(alpha=price),color="blue", position='jitter')+
scale_alpha(name="Price")  #edit legend of opacity
qplot(carat, price, geom = c("point","smooth"), shape=cut, alpha=0.1, method="lm", data=diamonds, position="jitter")
#As the carat of the diamonds increases, the price of the diamonds increases.
qplot(carat, price, geom = c("point","smooth"), method="lm", shape=cut, alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x, shape=cut, alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x, alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x,scale_x_log10(), scale_y_log10() alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x,scale_x_log10, scale_y_log10, alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x,log="x,y" alpha=0.1, position="jitter", data=diamonds)
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x,log="x,y", alpha=0.1, position="jitter", data=diamonds)
dsmall <- diamonds[sample(nrow(diamonds),200), ]
qplot(carat,geom = "histogram", binwidth=0.1, data=dsmall, xlim=c(0,3))
qplot(carat, geom="density", color=color, data=dsmall)
qplot(x=carat, geom="density", color=color, data=dsmall)
qplot(carat, price, geom = c("point","smooth"), method="lm", shape=cut, alpha=0.1, data=dsmall)
#As the carat of the diamonds and the quality of the cut increase, the price of the diamonds increases.There is a positive linear relationship between carat and price.
qplot(carat, price, shape=cut, alpha=0.1, data=dsmall)
#As the carat of the diamonds and the quality of the cut increase, the price of the diamonds increases.There is a positive linear relationship between carat and price.
qplot(carat, price, geom = c("point","smooth"), method="lm", formula=y~x,log="x,y", alpha=0.1, position="jitter", data=dsmall)
#As the carat of the diamonds increases, the price of the diamonds increases.
qplot(log(carat), log(price), geom = c("point","smooth"), method="lm", alpha=0.1, position="jitter", data=dsmall)
#As the carat of the diamonds increases, the price of the diamonds increases.
qplot(log(carat), log(price), geom = c("point","smooth"), formular=y~x, method="lm", alpha=0.1, position="jitter", data=dsmall)
#As the carat of the diamonds increases, the price of the diamonds increases.
qplot(log(carat), log(price), geom = c("jitter","smooth"), formular=y~x, method="lm", alpha=0.1, data=dsmall)
#As the carat of the diamonds increases, the price of the diamonds increases.
library(babynames)
library(nycflights13)
library(tidyverse)
babynames %>%
group_by(name, sex) %>%
summarise(total=sum(n)) %>%
arrange(desc(total)) %>%
ungroup() %>%
top_n(5, total) %>%
ggplot() +
geom_col(mapping=aes(x=name,y=total,fill=sex))
filter(total>20)
Flight_New <- flights%>%
group_by(dest)%>%
summarise(total=length(flight), avg_dist=mean(distance, na.rm = TRUE), avg_arr=mean(arr_delay, na.rm=TRUE))%>%
filter(dest!="HNL")%>%
filter(total>20)
View(Flight_New)
Flight_New%>%
ggplot(aes(x=avg_dist, y=avg_arr))+
geom_point(aes(size=total, alpha=0.5))+
geom_smooth(method="lm", se = FALSE)
Flight_New%>%
ggplot(aes(x=avg_dist, y=avg_arr))+
geom_point(aes(size=total, alpha=0.5))+
geom_smooth(method="lm", se = FALSE)+
xlab(x="arrival delay", y="average distance")
Flight_New%>%
ggplot(aes(x=avg_dist, y=avg_arr))+
geom_point(aes(size=total, alpha=0.5))+
geom_smooth(method="lm", se = FALSE)+
labs(x="arrival delay", y="average distance")
#a)
professional<-ifelse(Prestige$type=="prof",1,0)
install.packages(car)
library(car)
data(Prestige)
help(Prestige)
# here is where you load any necessary packages
install.packages("car")
install.packages("car")
#p-value:
#df= n-3 = 131-3 = 128
2*pt(2.625, 128, lower.tail = F)
#p-value:
#df= n-3 = 131-3 = 128
2*pt(3.23, 128, lower.tail = F)
# set working directory
setwd("~/Documents/GitHub/QTM200Spring2020/problem_sets/PS4/Answer")
levels(Prestige$type)
levels(Prof)
#Store the edited varaible into a newe variable called "Prof"
Prof <- ifelse(Prestige$type=="prof",1,0)
levels(Prof)
str(Prof)
#####################
# Problem 1
#####################
#(a) Create a new variable professional by recoding the variable type so that professionals
#are coded as 1, and blue and white collar workers are coded as 0 (Hint: ifelse.)
#Check the levels of the variable
Prestige$type
#####################
# Problem 1
#####################
#(a) Create a new variable professional by recoding the variable type so that professionals
#are coded as 1, and blue and white collar workers are coded as 0 (Hint: ifelse.)
#Check the variable
str(Prestige$type)
#####################
# Problem 1
#####################
#(a) Create a new variable professional by recoding the variable type so that professionals
#are coded as 1, and blue and white collar workers are coded as 0 (Hint: ifelse.)
#Check the variable
levels(Prestige$type)
